classdef PhaseClass < handle
    %PhaseClass Class that describes a given phase of this class.
    
    properties
        %% List with object that represent each component in this phase
        Components
        %% Number of Components in this Phase
        num_components
        %% Matrix that contains the fraction of component i in phase j
        x_ij
        %% Matrix that contains the binary interaction coeficient between
        %% component k_i
        delta_ki
        %% aki - Component Compoent Iteration Coeficient
        aki
        %% Phase aj bj Parameters (Peng Robison Equation)
        aj
        bj
        Aj
        Bj
        %% Boolean that states if Phase is Aqueos
        isAq = false;
        %% Component's Symbols
        symbols
    end
    properties (Access = private)
        compWater
        %% binary interaction coefficient for constant parameters
        tabled_delta_ki_ind
        tabled_delta_ki
        R = 83.1447; % bar cm^3 mol^(-1) K^(-1);
        T = 90 + 273.15 % Isothermal Condition
        delta_ind
        num_cells
        %%  Peng Robison's Compressiblity Factor (big Z)
        Z_comp
    end
    
    methods
        function obj = PhaseClass(Components, x_ij)
            %PhaseClass Constructors;
            obj.Components = Components;
            obj.num_components = length(Components);
            obj.symbols = [Components(:).symbol];
            [obj.tabled_delta_ki_ind, obj.tabled_delta_ki] =  ...
                                    read_delta_table(obj.symbols);
            obj.compWater = (ismember(obj.symbols,"water"));
            obj.delta_ind = obj.tabled_delta_ki_ind;
            obj.x_ij = x_ij;
            obj.num_cells = length(x_ij);
            obj.initalize_eos();
            obj.Z_comp =  obj.find_compressibility_factor();
        end
        
    end
        
    methods (Access = private)    
        function initalize_eos(obj)
            obj.isAq = obj.checkIfAqueous();      
            %obj.delta_ki = obj.define_binary_coef;
            
            % Prepare the Constants for Peng Robisonb EOS
            ak = horzcat(obj.Components(:).ak);
            bk = [obj.Components(:).bk]';  
            % Computing aki - Component Compoent Iteration Coeficient
            obj.aki = obj.compute_aki(ak);
            % Compute Mixture Parameters
            %% needed for the fugacity computation 
            obj.aj = obj.compute_mixture_aj();
            obj.bj = obj.compute_mixture_bj(bk);
            %% coeficient of the peng robson equation 
            obj.Aj = obj.compute_mixture_Aj();
            obj.Bj = obj.compute_mixture_Bj();
        end
        function [aki] = compute_aki(obj, ak)
            ind_list = generate_arrange_2(obj.num_components);
            aki = zeros(length(ak), length(ind_list));
            for index = 1:length(ind_list)
                k_ind = ind_list(index,1);
                i_ind = ind_list(index,2);
                ref = ((obj.delta_ind(:,1) == k_ind) & ...
                    (obj.delta_ind(:,2) == i_ind)) |  ...
                    ((obj.delta_ind(:,1) == i_ind) & ...
                    (obj.delta_ind(:,2) == k_ind));
                if any(ref)
                    delta = obj.tabled_delta_ki(ref)*ones(obj.num_cells,1);
                    water_ref = ([k_ind i_ind] == find(obj.compWater));
                    if any(obj.isAq) && any(water_ref)
                        no_water_ind =  [k_ind i_ind];
                        no_water_ind = no_water_ind(~water_ref);
                        delta(obj.isAq) = obj.Components(no_water_ind). ...
                                        AqueousBinaryCoefficient(obj.isAq);                    
                    end
                else
                    delta = 0;
                end
                aki(:,index) = (1 - delta) .* ...
                    (ak(:,k_ind).* ak(:,i_ind)).^.5;
            end
        end
        function aj = compute_mixture_aj(obj)
            aj = zeros(length(obj.x_ij),1);
            ind_list = generate_arrange_2(obj.num_components);
            for index = 1:length(ind_list)
                k_ind = ind_list(index,1);
                i_ind = ind_list(index,2);
                aki_local = obj.aki(:,index);
                aj = aj + (obj.x_ij(:,k_ind) .* obj.x_ij(:,i_ind).* ...
                                                            aki_local);
            end
        end
        function bj = compute_mixture_bj(obj, bk)
            bj = sum(repmat(bk', obj.num_cells,1).*obj.x_ij,2);
        end
        function Aj = compute_mixture_Aj(obj)
            Aj = obj.aj.*obj.Components(1, 1).P ...
               ./(obj.R.*obj.Components(1, 1).T).^2;
        end
        function Bj = compute_mixture_Bj(obj)
            Bj = obj.bj.*obj.Components(1, 1).P ...
               ./(obj.R.*obj.Components(1, 1).T);
        end        
        function isAq = checkIfAqueous(obj)
            if ~any(obj.compWater,2)
                isAq = false;
            else
                water_fraction = obj.x_ij(:,obj.compWater);
                isAq = water_fraction > 0.8;
            end
        end  
        
        function [zf] = find_compressibility_factor(obj)
            zf = zeros(obj.num_cells,1);
            a = ones(obj.num_cells, 1);
            b = - (1 - obj.Bj);
            c = obj.Aj - 3*obj.Bj.^2 - 2*obj.Bj;
            d = - (obj.Aj.*obj.Bj - obj.Bj.^2 - obj.Bj.^3);
            [Z] = solve_cubic_eq(a,b,c,d);
            real_roots_ref = ~iscomplexVEC(Z);
            Z(~real_roots_ref) = nan;
            zmin = min(Z,[],2);
            zmax = max(Z,[],2);
            num_real_roots = sum(real_roots_ref,2);
            Z(~real_roots_ref) = 0;
            ref_one_root = num_real_roots == 1;
            zf(ref_one_root) = sum(Z(ref_one_root,:),2);
            zf(~ref_one_root) = find_root_min_free_gibenergy(zmin,zmax, ...
                                            obj.Aj, obj.Bj, ~ref_one_root);
        end
    end
end


function z = find_root_min_free_gibenergy(zmin, zmax, A,B,ref_multroots)
zmin = zmin(ref_multroots);
zmax = zmax(ref_multroots);
z = zeros(size(zmin));
A = A(ref_multroots);
B = B(ref_multroots);
delta1 = 1+sqrt(2);
delta2 = 1-sqrt(2);
dG = (zmax-zmin) + log((zmin-B)./(zmax-B)) - A./(B*(delta2-delta1)) + ...
                            log((zmin+delta1*B).*(zmax+delta2*B)./ ...
                                ((zmin+delta2*B).*(zmax+delta1*B)));
ref_pos = dG >=0;
z(ref_pos) = zmin(ref_pos);
z(~ref_pos) = zmax(~ref_pos);
end

